<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Django&#39;s blog</title>
  <subtitle>Just for fun.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.djangoz.com/"/>
  <updated>2017-09-10T09:08:57.934Z</updated>
  <id>http://www.djangoz.com/</id>
  
  <author>
    <name>Django</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java实现简易的stack</title>
    <link href="http://www.djangoz.com/2017/09/09/stack-in-java/"/>
    <id>http://www.djangoz.com/2017/09/09/stack-in-java/</id>
    <published>2017-09-08T16:00:00.000Z</published>
    <updated>2017-09-10T09:08:57.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用java实现stack模板"><a href="#用java实现stack模板" class="headerlink" title="用java实现stack模板"></a>用java实现stack模板</h2><p>栈是一种基于后进先出（LIFO)策略的线性数据结构。<br>这就像手枪弹夹一样，先填进去的子弹都打出，后填进去的子弹后打出。<br>该模板只有5个方法，分别是isEmpty(),size(),top(),pop(),push(T).<br>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stack</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> Node first;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> N;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</div><div class="line">		Item item;</div><div class="line">		Node next;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;						<span class="comment">//判断是否为空</span></div><div class="line">		<span class="keyword">return</span> first ==<span class="keyword">null</span>;</div><div class="line">		&#125; </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;							 	<span class="comment">//栈的大小</span></div><div class="line">		<span class="keyword">return</span> N;</div><div class="line">		&#125;                   </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span></span>&#123;                    <span class="comment">//添加元素</span></div><div class="line">		Node oldfirst = first;</div><div class="line">		first = <span class="keyword">new</span> Node();</div><div class="line">		first.item = item;</div><div class="line">		first.next = oldfirst;</div><div class="line">		N++;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span>&#123;                              <span class="comment">//弹出元素</span></div><div class="line">		Item item = first.item;</div><div class="line">		first = first.next;</div><div class="line">		N--;</div><div class="line">		<span class="keyword">return</span> item;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">top</span><span class="params">()</span></span>&#123;		<span class="comment">//访问栈顶元素</span></div><div class="line">		<span class="keyword">return</span> first.item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		stack&lt;Integer&gt; te = <span class="keyword">new</span> stack&lt;Integer&gt;();</div><div class="line">		te.push(<span class="number">19</span>);</div><div class="line">		<span class="keyword">if</span>(te.isEmpty())&#123;</div><div class="line">			System.out.println(<span class="string">"isEmpty!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span></div><div class="line">			System.out.println(<span class="string">"Not Empty!"</span>);</div><div class="line">		te.push(<span class="number">20</span>);</div><div class="line">		System.out.println(te.pop());</div><div class="line">		System.out.println(te.top());</div><div class="line">		System.out.println(te.pop());</div><div class="line">		<span class="keyword">if</span>(te.isEmpty())&#123;</div><div class="line">			System.out.println(<span class="string">"isEmpty!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span></div><div class="line">			System.out.println(<span class="string">"Not Empty!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该程序输入为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Not Empty!</div><div class="line">20</div><div class="line">19</div><div class="line">19</div><div class="line">isEmpty!</div></pre></td></tr></table></figure></p>
<p>部分实现参考于<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="external">算法(第四版)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用java实现stack模板&quot;&gt;&lt;a href=&quot;#用java实现stack模板&quot; class=&quot;headerlink&quot; title=&quot;用java实现stack模板&quot;&gt;&lt;/a&gt;用java实现stack模板&lt;/h2&gt;&lt;p&gt;栈是一种基于后进先出（LIFO)策略的线性数
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="http://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java实现简易的queue</title>
    <link href="http://www.djangoz.com/2017/09/09/queue-in-java/"/>
    <id>http://www.djangoz.com/2017/09/09/queue-in-java/</id>
    <published>2017-09-08T16:00:00.000Z</published>
    <updated>2017-09-10T09:10:20.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用java实现queue模板"><a href="#用java实现queue模板" class="headerlink" title="用java实现queue模板"></a>用java实现queue模板</h2><p>队列是一种基于先进先出（FIFO)策略的线性数据结构。<br>这就像在学校食堂买饭排队一样，排在前面的人先打饭，后面的人后打饭。<br>该模板只有6个方法，分别是isEmpty(),size(),front(),back(),pop(),push(T).<br>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">queue</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> Node first;</div><div class="line">	<span class="keyword">private</span> Node last;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> N;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">		Item item;</div><div class="line">		Node next;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;			<span class="comment">//判断是否为空</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.first==<span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;				<span class="comment">//队列的大小</span></div><div class="line">		<span class="keyword">return</span> N;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item T)</span></span>&#123;			<span class="comment">//向队列添加元素</span></div><div class="line">		Node temp = last;</div><div class="line">		last = <span class="keyword">new</span> Node();</div><div class="line">		last.item = T;</div><div class="line">		last.next = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(isEmpty())</div><div class="line">			first = last;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			temp.next = last;</div><div class="line">		N++;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span>&#123;		<span class="comment">//弹出第一个元素，并返回第一个元素</span></div><div class="line">		Node temp = first;</div><div class="line">		first = first.next;</div><div class="line">		<span class="keyword">if</span>(isEmpty()) </div><div class="line">			last=<span class="keyword">null</span>;</div><div class="line">		N--;</div><div class="line">		<span class="keyword">return</span> temp.item;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">front</span><span class="params">()</span></span>&#123;		<span class="comment">//访问队列第一个元素</span></div><div class="line">		<span class="keyword">return</span> first.item;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">back</span><span class="params">()</span></span>&#123;&#125;		<span class="comment">//访问队列最后一个元素</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		queue&lt;String&gt; sb = <span class="keyword">new</span> queue&lt;String&gt;();</div><div class="line">		sb.push(<span class="string">"hi"</span>);</div><div class="line">		<span class="keyword">if</span>(sb.isEmpty())</div><div class="line">			System.out.println(<span class="string">"isEmpty!"</span>);</div><div class="line">		<span class="keyword">else</span> System.out.println(<span class="string">"NotEmpty!"</span>);</div><div class="line">		sb.push(<span class="string">"hello"</span>);</div><div class="line">		sb.push(<span class="string">"world"</span>);</div><div class="line">		System.out.println(sb.front());</div><div class="line">		System.out.println(sb.pop());</div><div class="line">		System.out.println(sb.back());</div><div class="line">		System.out.println(sb.pop());</div><div class="line">		System.out.println(sb.pop());</div><div class="line">		<span class="keyword">if</span>(sb.isEmpty())</div><div class="line">			System.out.println(<span class="string">"isEmpty!"</span>);</div><div class="line">		<span class="keyword">else</span> System.out.println(<span class="string">"NotEmpty!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该程序输入为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NotEmpty!</div><div class="line">hi</div><div class="line">hi</div><div class="line">world</div><div class="line">hello</div><div class="line">world</div><div class="line">NotEmpty!</div></pre></td></tr></table></figure></p>
<p>部分实现参考于<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="external">算法(第四版)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用java实现queue模板&quot;&gt;&lt;a href=&quot;#用java实现queue模板&quot; class=&quot;headerlink&quot; title=&quot;用java实现queue模板&quot;&gt;&lt;/a&gt;用java实现queue模板&lt;/h2&gt;&lt;p&gt;队列是一种基于先进先出（FIFO)策略的线性
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="http://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>windows下访问linux分区文件</title>
    <link href="http://www.djangoz.com/2017/08/18/windows-to-linux/"/>
    <id>http://www.djangoz.com/2017/08/18/windows-to-linux/</id>
    <published>2017-08-18T03:27:50.000Z</published>
    <updated>2017-08-24T14:33:36.468Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://sourceforge.net/projects/ext2fsd/files/" target="_blank" rel="external">Ext2Fsd Project</a>是Windows下的应用程序，可以在windows下访问ext2/ext3/ext4文件系统，可以设置编码，分配盘符，更可以在windows下读写，使用性能好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://sourceforge.net/projects/ext2fsd/files/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ext2Fsd Project&lt;/a&gt;是Windows下的应用程序，可以在windows下访问ex
    
    </summary>
    
    
      <category term="linux" scheme="http://www.djangoz.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>更换主题</title>
    <link href="http://www.djangoz.com/2017/08/17/change-theme/"/>
    <id>http://www.djangoz.com/2017/08/17/change-theme/</id>
    <published>2017-08-17T10:10:16.000Z</published>
    <updated>2017-08-24T14:33:30.159Z</updated>
    
    <content type="html"><![CDATA[<p>爱折腾的我又把原来网站换了框架，<br>把jekyll换成了hexo，<br>感觉hexo支持的主题看起来美观多了<br>该主题来自<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">indigo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爱折腾的我又把原来网站换了框架，&lt;br&gt;把jekyll换成了hexo，&lt;br&gt;感觉hexo支持的主题看起来美观多了&lt;br&gt;该主题来自&lt;a href=&quot;https://github.com/yscoder/hexo-theme-indigo&quot; target=&quot;_blank&quot; 
    
    </summary>
    
    
      <category term="闲言碎语" scheme="http://www.djangoz.com/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>在linux环境安装shadowsocksR客户端</title>
    <link href="http://www.djangoz.com/2017/08/16/linux_setup_ssr/"/>
    <id>http://www.djangoz.com/2017/08/16/linux_setup_ssr/</id>
    <published>2017-08-15T16:00:00.000Z</published>
    <updated>2017-08-24T14:33:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>ssr 相比于ss 更加稳定，推荐安装ssr<br>之前在网上找很久没找到如何在Linux环境下运行ssr，后来通过这个脚本安装ssr，亲测可用<br>安装以后可通过　ssr start或者　ssr config　命令运行ssr<br>使用root用户登录，运行以下命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://www.djangoz.com/linux_setup_ssr/ssr</div><div class="line">sudo mv ssr /usr/<span class="built_in">local</span>/bin</div><div class="line">sudo chmod 766 /usr/<span class="built_in">local</span>/bin/ssr</div><div class="line">ssr install</div><div class="line">ssr config</div></pre></td></tr></table></figure></p>
<h4 id="ssr的配置就不说明了，很简单的"><a href="#ssr的配置就不说明了，很简单的" class="headerlink" title="ssr的配置就不说明了，很简单的"></a>ssr的配置就不说明了，很简单的</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ssr 相比于ss 更加稳定，推荐安装ssr&lt;br&gt;之前在网上找很久没找到如何在Linux环境下运行ssr，后来通过这个脚本安装ssr，亲测可用&lt;br&gt;安装以后可通过　ssr start或者　ssr config　命令运行ssr&lt;br&gt;使用root用户登录，运行以下命令：&lt;
    
    </summary>
    
    
      <category term="科学上网" scheme="http://www.djangoz.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>求二叉树的最大深度和最小深度</title>
    <link href="http://www.djangoz.com/2017/08/15/Depth-of-Binary-tree/"/>
    <id>http://www.djangoz.com/2017/08/15/Depth-of-Binary-tree/</id>
    <published>2017-08-14T16:00:00.000Z</published>
    <updated>2017-09-09T12:10:39.938Z</updated>
    
    <content type="html"><![CDATA[<p>运用递归的思想实现起来简单很多。</p>
<h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    TreeNode *left,*right;</div><div class="line">    TreeNode()&#123;&#125;</div><div class="line">    TreeNode(<span class="keyword">int</span> _val):val(_val),left(<span class="literal">NULL</span>),right(<span class="literal">NULL</span>)&#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>具体实现二叉树就不写了。</p>
<h3 id="求二叉树的最大深度"><a href="#求二叉树的最大深度" class="headerlink" title="求二叉树的最大深度"></a>求二叉树的最大深度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(!root-&gt;left) <span class="keyword">return</span> <span class="number">1</span>+maxDepth(root-&gt;right);</div><div class="line">    <span class="keyword">if</span>(!root-&gt;right) <span class="keyword">return</span> <span class="number">1</span>+maxDepth(root-&gt;left);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>+max(maxDepth(root-&gt;left),maxDepth(root-&gt;right));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="求二叉树的最小深度"><a href="#求二叉树的最小深度" class="headerlink" title="求二叉树的最小深度"></a>求二叉树的最小深度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(!root-&gt;left) <span class="keyword">return</span> <span class="number">1</span>+minDepth(root-&gt;right);</div><div class="line">    <span class="keyword">if</span>(!root-&gt;right) <span class="keyword">return</span> <span class="number">1</span>+minDepth(root-&gt;left);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>+min(minDepth(root-&gt;left),minDepth(root-&gt;right));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运用递归的思想实现起来简单很多。&lt;/p&gt;
&lt;h3 id=&quot;二叉树的定义&quot;&gt;&lt;a href=&quot;#二叉树的定义&quot; class=&quot;headerlink&quot; title=&quot;二叉树的定义&quot;&gt;&lt;/a&gt;二叉树的定义&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;ta
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="http://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>先随便写写</title>
    <link href="http://www.djangoz.com/2017/08/12/wirte-something/"/>
    <id>http://www.djangoz.com/2017/08/12/wirte-something/</id>
    <published>2017-08-11T16:00:00.000Z</published>
    <updated>2017-08-24T14:32:49.833Z</updated>
    
    <content type="html"><![CDATA[<p>　　今天终于学会在静态网站上安装插件了(其实也不算，是直接用的别人的主题)，原来也不难，昨天弄了老半天都没弄出来<br>　　还是写一写方法吧<br>　　(⊙o⊙)…还是以后在写吧，现在还不会用markdown写文档<br>　　初学者什么都不会~~o(&gt;_&lt;)o ~~<br>　　还是直接贴我参考的地方吧<a href="http://ixti.net/software/2013/01/28/using-jekyll-plugins-on-github-pages.html" target="_blank" rel="external">在GitHub页面上使用Jekyll插件</a><br>  　　把主题<a href="https://github.com/mmistakes/made-mistakes-jekyll" target="_blank" rel="external">作者的github项目主页</a>贴一下，表示感谢</p>
]]></content>
    
    <summary type="html">
    
      A ton of text to test readability.
    
    </summary>
    
    
      <category term="闲言碎语" scheme="http://www.djangoz.com/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>创建博客成功</title>
    <link href="http://www.djangoz.com/2017/08/11/first-time/"/>
    <id>http://www.djangoz.com/2017/08/11/first-time/</id>
    <published>2017-08-10T16:00:00.000Z</published>
    <updated>2017-08-24T14:32:15.892Z</updated>
    
    <content type="html"><![CDATA[<p>创建时间2017-08-11 23:17:37<br>弄了一天终于弄成个样子了，准备装插件，但是一直没有成功<br>更新时间2017-08-12 00:04:57</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建时间2017-08-11 23:17:37&lt;br&gt;弄了一天终于弄成个样子了，准备装插件，但是一直没有成功&lt;br&gt;更新时间2017-08-12 00:04:57&lt;/p&gt;

    
    </summary>
    
    
      <category term="闲言碎语" scheme="http://www.djangoz.com/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
</feed>
