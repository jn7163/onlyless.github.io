<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Django&#39;s blog</title>
  <subtitle>Just for fun.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.djangoz.com/"/>
  <updated>2017-10-28T10:27:14.535Z</updated>
  <id>http://www.djangoz.com/</id>
  
  <author>
    <name>Django</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>湖北工业大学教务系统查分,查课小程序</title>
    <link href="http://www.djangoz.com/2017/10/27/Login_hbut/"/>
    <id>http://www.djangoz.com/2017/10/27/Login_hbut/</id>
    <published>2017-10-26T16:00:00.000Z</published>
    <updated>2017-10-28T10:27:14.535Z</updated>
    
    <content type="html"><![CDATA[<p>首先贴下github<a href="https://github.com/onlyless/login_hbut" target="_blank" rel="external">项目地址</a> (如果觉得这个程序好，求个star)</p>
<p>运行该小程序需安装requests和bs4库,还需要安装能操作excel的xlwt库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip install requests</div><div class="line">pip install bs4</div><div class="line">pip install xlwt</div></pre></td></tr></table></figure>
<p>现在该程序不能自动识别验证码，需手动在控制台输入二维码，然后输入学号和密码即可查询，作者本人大二，所以现在可支持查询大一两个学期和大二上的成绩，成绩会自动保存在本地。<br>由于课表不好格式化输出，如需查课表，程序会生成一个excel文件，然后直接查看即可</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先用requests库模拟登陆学校的教务系统，然后再进入成绩查询的页面，得到该页面的html源码，用BeatufulSoup来解析页面，提取出每门课的学分和成绩用列表来储存，最后格式化输出，并将输出写入文件。<br>我把直接用函数来表示每个步骤，自我感觉思路比较清晰</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="查分小程序"><a href="#查分小程序" class="headerlink" title="查分小程序"></a>查分小程序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup,element</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">login_url = <span class="string">'http://run.hbut.edu.cn/Account/LogOn'</span></div><div class="line">checkimg = <span class="string">'http://run.hbut.edu.cn/Account/GetValidateCode'</span></div><div class="line">StuGrade = <span class="string">'http://run.hbut.edu.cn/StuGrade/Index'</span></div><div class="line">g_20171 = <span class="string">'?SemesterName=20171&amp;SemesterNameStr=2017学年%20第一学期'</span></div><div class="line">g_20162 = <span class="string">'?SemesterName=20162&amp;SemesterNameStr=2016学年%20第二学期'</span></div><div class="line">g_20161 = <span class="string">'?SemesterName=20161&amp;SemesterNameStr=2016学年%20第一学期'</span></div><div class="line"></div><div class="line">file = open(<span class="string">'grade.txt'</span>,<span class="string">'w+'</span>)</div><div class="line">session  = requests.Session()</div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'Referer'</span> : <span class="string">'http://run.hbut.edu.cn/'</span>,</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36"</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#获取登陆验证码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetValidateCode</span><span class="params">()</span>:</span></div><div class="line">    checkcodecontent = session.get(checkimg,headers=headers)</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'checkcode.jpg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(checkcodecontent.content)</div><div class="line">    print(<span class="string">'验证码已写入到本地！'</span>)</div><div class="line">    os.startfile(<span class="string">"checkcode.jpg"</span>)</div><div class="line">    checkcode = input(<span class="string">"请输入验证码："</span>)</div><div class="line">    payload = &#123;</div><div class="line">        <span class="string">'Role'</span>:<span class="string">'Student'</span>,</div><div class="line">        <span class="string">'UserName'</span>: input(<span class="string">'请输入账号：'</span>),</div><div class="line">        <span class="string">'Password'</span>: input(<span class="string">'请输入密码：'</span>),</div><div class="line">        <span class="string">'ValidateCode'</span>: checkcode</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> payload</div><div class="line"></div><div class="line"><span class="comment">#获取课程成绩页面</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtmlText</span><span class="params">(SemesterName,payload)</span>:</span></div><div class="line">    respose = session.post(login_url,headers=headers,data=payload)</div><div class="line">    print(<span class="string">'服务器端返回码：'</span>,respose.status_code)</div><div class="line">    <span class="keyword">if</span> SemesterName <span class="keyword">is</span> <span class="string">'1'</span>:</div><div class="line">        SemesterName = g_20161</div><div class="line">    <span class="keyword">if</span> SemesterName <span class="keyword">is</span> <span class="string">'2'</span>:</div><div class="line">        SemesterName = g_20162</div><div class="line">    <span class="keyword">if</span> SemesterName <span class="keyword">is</span> <span class="string">'3'</span>:</div><div class="line">        SemesterName = g_20171</div><div class="line">    grade_url = StuGrade+SemesterName</div><div class="line">    stugrade = session.get(grade_url,headers=headers)</div><div class="line">    <span class="keyword">return</span> stugrade.text</div><div class="line">    </div><div class="line"><span class="comment">#提取各科成绩</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFromText</span><span class="params">(txt)</span>:</span></div><div class="line">    form = []</div><div class="line">    soup = BeautifulSoup(txt,<span class="string">'html.parser'</span>)</div><div class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'table'</span>).children:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> isinstance(tr,element.Tag):</div><div class="line">                tds = tr(<span class="string">'td'</span>)</div><div class="line">                Class = tds[<span class="number">1</span>].string       <span class="comment">#课程</span></div><div class="line">                Credit = tds[<span class="number">4</span>].string      <span class="comment">#学分</span></div><div class="line">                Grade = tds[<span class="number">5</span>].string       <span class="comment">#成绩</span></div><div class="line">                form.append([<span class="string">''</span>.join(Class.split()),<span class="string">''</span>.join(Credit.split()),<span class="string">''</span>.join(Grade.split())])</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> form</div><div class="line"></div><div class="line"><span class="comment">#格式输出各科成绩</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printgrade</span><span class="params">(ulist,num)</span>:</span></div><div class="line">    tplt = <span class="string">"&#123;0:&#123;3&#125;^25&#125;\t&#123;1:^10&#125;\t&#123;2:^10&#125;\n"</span></div><div class="line">    print(tplt.format(<span class="string">"课程"</span>,<span class="string">"学分"</span>,<span class="string">"成绩"</span>,chr(<span class="number">12288</span>)))</div><div class="line">    file.write(tplt.format(<span class="string">"课程"</span>,<span class="string">"学分"</span>,<span class="string">"成绩"</span>,chr(<span class="number">12288</span>)))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</div><div class="line">        u = ulist[i]</div><div class="line">        print(tplt.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</div><div class="line">        file.write(tplt.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span> </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        payload = GetValidateCode()</div><div class="line">        print(<span class="string">'16学年第一学期： 1'</span>)</div><div class="line">        print(<span class="string">'16学年第二学期： 2'</span>)</div><div class="line">        print(<span class="string">'17学年第一学期： 3'</span>)</div><div class="line">        SenesterName = input(<span class="string">'请输入查询的学期：'</span>)</div><div class="line">        txt = getHtmlText(SenesterName,payload)</div><div class="line">        form = GetFromText(txt)</div><div class="line">        printgrade(form,len(form));</div><div class="line">    <span class="keyword">except</span> :</div><div class="line">        print(<span class="string">"Error"</span>)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        file.close()</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure>
<h4 id="查课小程序"><a href="#查课小程序" class="headerlink" title="查课小程序"></a>查课小程序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">login_url = <span class="string">'http://run.hbut.edu.cn/Account/LogOn'</span></div><div class="line">checkimg = <span class="string">'http://run.hbut.edu.cn/Account/GetValidateCode'</span></div><div class="line">Schedule = <span class="string">'http://run.hbut.edu.cn/ArrangeTask/MyselfSchedule'</span></div><div class="line">workbook = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</div><div class="line">worksheet = workbook.add_sheet(<span class="string">'MyselfSchedule'</span>)</div><div class="line">session  = requests.Session()</div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'Referer'</span> : <span class="string">'http://run.hbut.edu.cn/'</span>,</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36"</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#获取登陆验证码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetValidateCode</span><span class="params">()</span>:</span></div><div class="line">    checkcodecontent = session.get(checkimg,headers=headers)</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'checkcode.jpg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(checkcodecontent.content)</div><div class="line">    print(<span class="string">'验证码已写入到本地！'</span>)</div><div class="line">    os.startfile(<span class="string">"checkcode.jpg"</span>)</div><div class="line">    checkcode = input(<span class="string">"请输入验证码："</span>)</div><div class="line">    payload = &#123;</div><div class="line">        <span class="string">'Role'</span>:<span class="string">'Student'</span>,</div><div class="line">        <span class="string">'UserName'</span>: input(<span class="string">'请输入账号：'</span>),</div><div class="line">        <span class="string">'Password'</span>: input(<span class="string">'请输入密码：'</span>),</div><div class="line">        <span class="string">'ValidateCode'</span>: checkcode</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> payload</div><div class="line"></div><div class="line"><span class="comment">#获取课程表网页</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtmlText</span><span class="params">(payload)</span>:</span></div><div class="line">    respose = session.post(login_url,headers=headers,data=payload)</div><div class="line">    print(<span class="string">'服务器端返回码：'</span>,respose.status_code)</div><div class="line">    work = session.get(Schedule,headers=headers)</div><div class="line">    <span class="keyword">return</span> work.text</div><div class="line"></div><div class="line"><span class="comment">#提取网页中的课程表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFormText</span><span class="params">(string)</span>:</span></div><div class="line">    soup = BeautifulSoup(string,<span class="string">'html.parser'</span>)</div><div class="line">    list = []</div><div class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'table'</span>).children:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            time = tr(<span class="string">'th'</span>)[<span class="number">0</span>].string</div><div class="line">            <span class="keyword">if</span> time==<span class="keyword">None</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            day1 = tr(<span class="string">'td'</span>)[<span class="number">0</span>].string</div><div class="line">            day2 = tr(<span class="string">'td'</span>)[<span class="number">1</span>].string</div><div class="line">            day3 = tr(<span class="string">'td'</span>)[<span class="number">2</span>].string</div><div class="line">            day4 = tr(<span class="string">'td'</span>)[<span class="number">3</span>].string</div><div class="line">            day5 = tr(<span class="string">'td'</span>)[<span class="number">4</span>].string</div><div class="line">            day6 = tr(<span class="string">'td'</span>)[<span class="number">5</span>].string</div><div class="line">            day7 = tr(<span class="string">'td'</span>)[<span class="number">6</span>].string</div><div class="line">            list.append([time,day1,day2,day3,day4,day5,day6,day7])</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">    <span class="keyword">return</span> list</div><div class="line"></div><div class="line"><span class="comment">#将提取到的课程表写入excel表格中</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">WirteXls</span><span class="params">(list)</span>:</span></div><div class="line">    worksheet.write(<span class="number">0</span>,<span class="number">1</span>,<span class="string">"星期一"</span>)</div><div class="line">    worksheet.write(<span class="number">0</span>,<span class="number">2</span>,<span class="string">"星期二"</span>)</div><div class="line">    worksheet.write(<span class="number">0</span>,<span class="number">3</span>,<span class="string">"星期三"</span>)</div><div class="line">    worksheet.write(<span class="number">0</span>,<span class="number">4</span>,<span class="string">"星期四"</span>)</div><div class="line">    worksheet.write(<span class="number">0</span>,<span class="number">5</span>,<span class="string">"星期五"</span>)</div><div class="line">    worksheet.write(<span class="number">0</span>,<span class="number">6</span>,<span class="string">"星期六"</span>)</div><div class="line">    worksheet.write(<span class="number">0</span>,<span class="number">7</span>,<span class="string">"星期日"</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</div><div class="line">        u = list[i]</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">            worksheet.write(i+<span class="number">1</span>,k,u[k])</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        payload = GetValidateCode()</div><div class="line">        string = getHtmlText(payload)</div><div class="line">        string = string.replace(<span class="string">'&lt;br /&gt;'</span>,<span class="string">''</span>)</div><div class="line">        list = getFormText(string)</div><div class="line">        WirteXls(list)</div><div class="line"></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        workbook.save(<span class="string">'MyselfSchedule.xls'</span>)</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先贴下github&lt;a href=&quot;https://github.com/onlyless/login_hbut&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目地址&lt;/a&gt; (如果觉得这个程序好，求个star)&lt;/p&gt;
&lt;p&gt;运行该小程序需安装req
    
    </summary>
    
      <category term="python" scheme="http://www.djangoz.com/categories/python/"/>
    
    
      <category term="小程序" scheme="http://www.djangoz.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>统计文本中单词频率</title>
    <link href="http://www.djangoz.com/2017/10/18/Vocabulary-Statistics/"/>
    <id>http://www.djangoz.com/2017/10/18/Vocabulary-Statistics/</id>
    <published>2017-10-17T16:00:00.000Z</published>
    <updated>2017-10-27T07:20:06.923Z</updated>
    
    <content type="html"><![CDATA[<p>想起高中的时候英语一直很差，后来发现背英语中出现频率最高的单词是一种很高效的学习方法，于是现在写出来一个小程序</p>
<p>github<a href="https://github.com/onlyless/Vocabulary-Statistics" target="_blank" rel="external">项目地址</a>(如果觉得这个程序好，求个star)<br>这个小程序可以统计文件input.txt文本中所有英文单词的词频（由高到低排序），并给出每个单词的翻译<br>这个程序有两种方法，第一种用goole-cloud库，收费的，不过运行时间快一些，第二种模拟网页请求，时间略长,不能大量翻译.<br>本程序用的两种方法都可以运行，第一种在本机运行后，超出了免费翻译次数，于是就用的第二种，要用第一种的话，把源代码中注释的代码取消注释即可，再把第二种的注释就可以了</p>
<h3 id="一-运行前需要安装google-cloud库-并安装Google-Cloud-SDK"><a href="#一-运行前需要安装google-cloud库-并安装Google-Cloud-SDK" class="headerlink" title="一.运行前需要安装google-cloud库,并安装Google Cloud SDK"></a>一.运行前需要安装google-cloud库,并安装Google Cloud SDK</h3><h4 id="1-安装相关模块"><a href="#1-安装相关模块" class="headerlink" title="1.安装相关模块"></a>1.安装相关模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade google-cloud-translate</div></pre></td></tr></table></figure>
<h4 id="2-调用api进行翻译之前，需要安装相关证书"><a href="#2-调用api进行翻译之前，需要安装相关证书" class="headerlink" title="2.调用api进行翻译之前，需要安装相关证书"></a>2.调用api进行翻译之前，需要安装相关证书</h4><p>安装  <a href="https://cloud.google.com/sdk/" target="_blank" rel="external">Google Cloud SDK</a><br>因为在本地上运行，使用的第一种方式，安装之后会有自动弹出验证邮箱的界面，如果没有在Google cloud sdk shell  运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcloud auth application-default login</div></pre></td></tr></table></figure></p>
<h3 id="二-使用urllib取googletranslate"><a href="#二-使用urllib取googletranslate" class="headerlink" title="二.使用urllib取googletranslate"></a>二.使用urllib取googletranslate</h3><p>模拟一个头部，请求到translate.google.com去，然后解析出翻译文本</p>
<h3 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h3><p>把将要统计的文本放入Input.txt文件中，直接运行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python word.py</div></pre></td></tr></table></figure>
<p>即可</p>
<p>源代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf8</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="comment"># from google.cloud import translate  </span></div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="comment"># translate_client = translate.Client()</span></div><div class="line"></div><div class="line"><span class="comment"># language = 'zh_CN'  #将要翻译的语言</span></div><div class="line">length = <span class="number">4</span>      <span class="comment">#提选出小于此长度的单词</span></div><div class="line"></div><div class="line">input = open(<span class="string">"words.txt"</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</div><div class="line">output = open(<span class="string">'ouput.txt'</span>,<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">typ = sys.getfilesystemencoding()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">translate</span><span class="params">(querystr, to_l=<span class="string">"zh"</span>, from_l=<span class="string">"en"</span>)</span>:</span></div><div class="line">    C_agent = &#123;<span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span>&#125;</div><div class="line">    flag = <span class="string">'class="t0"&gt;'</span></div><div class="line">    tarurl = <span class="string">"http://translate.google.com/m?hl=%s&amp;sl=%s&amp;q=%s \</span></div><div class="line"><span class="string">        "</span> % (to_l, from_l, querystr.replace(<span class="string">" "</span>, <span class="string">"+"</span>))</div><div class="line">    request = urllib.request.Request(tarurl, headers=C_agent)</div><div class="line">    page = str(urllib.request.urlopen(request).read().decode(typ))</div><div class="line">    target = page[page.find(flag) + len(flag):]</div><div class="line">    target = target.split(<span class="string">"&lt;"</span>)[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> target</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    all_word = input.read()</div><div class="line">    l = re.split(<span class="string">r'[^A-Za-z]+'</span>,all_word)</div><div class="line">    d = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</div><div class="line">        i = i.lower()</div><div class="line">        <span class="keyword">if</span> d.get(i)==<span class="keyword">None</span>:</div><div class="line">            d[i] = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            d[i] = d[i] +<span class="number">1</span></div><div class="line">    ju = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> sorted(d,key=d.get,reverse=<span class="keyword">True</span>):</div><div class="line">        <span class="keyword">if</span> len(word)&lt;length:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">        <span class="comment"># translation = translate_client.translate(word,target_language=language)  </span></div><div class="line">        <span class="comment"># tran = translation['translatedText']</span></div><div class="line">        tran = translate(word)</div><div class="line">        string = <span class="string">"%-18s%-10s%-7d\t"</span>%(word,tran,d[word])</div><div class="line">        <span class="comment"># string = "%-20s%-7d\t" %(word,d[word])</span></div><div class="line">        ju += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> ju%<span class="number">8</span>==<span class="number">0</span>:</div><div class="line">            string += <span class="string">'\n'</span></div><div class="line">        output.write(string)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    input.close()</div><div class="line">    output.close()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想起高中的时候英语一直很差，后来发现背英语中出现频率最高的单词是一种很高效的学习方法，于是现在写出来一个小程序&lt;/p&gt;
&lt;p&gt;github&lt;a href=&quot;https://github.com/onlyless/Vocabulary-Statistics&quot; target=&quot;
    
    </summary>
    
      <category term="python" scheme="http://www.djangoz.com/categories/python/"/>
    
    
      <category term="小程序" scheme="http://www.djangoz.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>可识别括号优先级的简易计算器</title>
    <link href="http://www.djangoz.com/2017/09/30/simple-calculator/"/>
    <id>http://www.djangoz.com/2017/09/30/simple-calculator/</id>
    <published>2017-09-29T16:00:00.000Z</published>
    <updated>2017-10-27T07:33:49.825Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/onlyless/Calculator" target="_blank" rel="external">github项目地址</a><br>该计算器用java实现<br>更新：现已支持多位数的输入（利用正则表达式提取输入的数值，再压入数值栈中）<br>GUI用swing实现，可识别括号优先级是用了双栈，一个栈存取操作符，一个栈存取数据<br>界面巨丑，待我学到更多后来更新此计算器。<br>主要是拿来练手的（这是第一个自己用代码实现GUI的小程序！！！）<br>主界面:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="./images/1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h3 id="CalculatorFrame-java"><a href="#CalculatorFrame-java" class="headerlink" title="CalculatorFrame.java"></a>CalculatorFrame.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"></div><div class="line"><span class="comment">/*计算器框架*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorFrame</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> JFrame frame;</div><div class="line">    <span class="keyword">private</span> JTextField number;</div><div class="line">    <span class="keyword">private</span> JPanel panel;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String expression =<span class="string">""</span>;  <span class="comment">//输入的数据转划为字符串</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculatorFrame</span><span class="params">()</span></span>&#123;</div><div class="line">        frame = <span class="keyword">new</span> JFrame(<span class="string">"Calculator"</span>);</div><div class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">        frame.setSize(<span class="number">300</span>,<span class="number">300</span>);</div><div class="line">        frame.setLocationRelativeTo(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">        number = <span class="keyword">new</span> JTextField();</div><div class="line">        number.setEditable(<span class="keyword">false</span>);</div><div class="line">        frame.add(number,BorderLayout.NORTH);</div><div class="line"></div><div class="line">        panel = <span class="keyword">new</span> JPanel();</div><div class="line">        panel.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">6</span>,<span class="number">3</span>));</div><div class="line">        frame.add(panel,BorderLayout.CENTER);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            addButton(String.valueOf(i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        addButton(<span class="string">"+"</span>);</div><div class="line">        addButton(<span class="string">"0"</span>);</div><div class="line">        addButton(<span class="string">"-"</span>);</div><div class="line">        addButton(<span class="string">"*"</span>);</div><div class="line">        addButton(<span class="string">"C"</span>);         <span class="comment">//按钮C的作用是清空整个输入</span></div><div class="line">        addButton(<span class="string">"/"</span>);</div><div class="line">        addButton(<span class="string">"("</span>);</div><div class="line">        addButton(<span class="string">")"</span>);</div><div class="line"></div><div class="line">        JButton equal = <span class="keyword">new</span> JButton(<span class="string">"="</span>);</div><div class="line">        equal.setActionCommand(<span class="string">"="</span>);</div><div class="line">        equal.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>&#123;</div><div class="line">                number.setText(<span class="string">""</span>+<span class="keyword">new</span> Calculate().calculating(expression)); <span class="comment">//显示计算得到的结果</span></div><div class="line">                expression = <span class="string">""</span>;            <span class="comment">//  计算后整个输入清空</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        panel.add(equal);</div><div class="line">        frame.add(panel);</div><div class="line">        frame.setResizable(<span class="keyword">false</span>);      <span class="comment">//设置窗口大小不可改变</span></div><div class="line">        frame.setVisible(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*当不为输入不为“C”和“=”时，将输入转化为字符串,为“C”时清空输入*/</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton</span><span class="params">(String name )</span></span>&#123;</div><div class="line">        JButton temp = <span class="keyword">new</span> JButton(name);</div><div class="line">        temp.setActionCommand(name);</div><div class="line">        <span class="keyword">if</span>(!<span class="string">"C"</span>.equals(name))</div><div class="line">            temp.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">                    expression += name;</div><div class="line">                    number.setText(expression);</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            temp.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">                    expression=<span class="string">""</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        panel.add(temp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Calculate-java"><a href="#Calculate-java" class="headerlink" title="Calculate.java"></a>Calculate.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="comment">/*读取一个字符串，然后在两个栈中计算表达式的值,这样可以判断（）的优先级*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculate</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt;String&gt; ops = <span class="keyword">new</span> Stack&lt;&gt;();   <span class="comment">//操作栈</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt;Double&gt; nums = <span class="keyword">new</span> Stack&lt;&gt;();  <span class="comment">//数据栈</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;</div><div class="line">        String op = ops.pop();</div><div class="line">        <span class="keyword">if</span> (op.equals(<span class="string">"+"</span>))</div><div class="line">            nums.push(nums.pop() + nums.pop());</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"-"</span>))</div><div class="line">            nums.push(-(nums.pop() - nums.pop());</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"*"</span>))</div><div class="line">            nums.push(nums.pop() * nums.pop());</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"/"</span>))</div><div class="line">            nums.push(nums.pop() / nums.pop());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculating</span><span class="params">(String s)</span></span>&#123;</div><div class="line">        String[] strs = s.split(<span class="string">"[^0-9]+"</span>);     <span class="comment">//利用正则表达式提取输入中的数值</span></div><div class="line">        <span class="keyword">for</span>(String str:strs)&#123;</div><div class="line">            nums.push(Double.parseDouble(str));     <span class="comment">//将提取的数值压到栈中</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">            <span class="keyword">switch</span> (s.charAt(i)) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">                    ops.push(<span class="string">"+"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">                    ops.push(<span class="string">"-"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'*'</span>:</div><div class="line">                    ops.push(<span class="string">"*"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'/'</span>:</div><div class="line">                    ops.push(<span class="string">"/"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">')'</span>: &#123;</div><div class="line">                    calculate();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="comment">//nums.push(Double.parseDouble(s.charAt(i) + ""));</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (!ops.empty()) &#123;</div><div class="line">            calculate();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums.pop();      <span class="comment">//返回结果</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="run-java"><a href="#run-java" class="headerlink" title="run.java"></a>run.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        EventQueue.invokeLater(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">new</span> CalculatorFrame();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/onlyless/Calculator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github项目地址&lt;/a&gt;&lt;br&gt;该计算器用java实现&lt;br&gt;更新：现已支持多位数的输入（利用正则表达式提取输
    
    </summary>
    
      <category term="java" scheme="http://www.djangoz.com/categories/java/"/>
    
    
      <category term="小程序" scheme="http://www.djangoz.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows cmd使用常用bash命令</title>
    <link href="http://www.djangoz.com/2017/09/28/windows_use_bash/"/>
    <id>http://www.djangoz.com/2017/09/28/windows_use_bash/</id>
    <published>2017-09-27T16:00:00.000Z</published>
    <updated>2017-10-01T13:49:22.069Z</updated>
    
    <content type="html"><![CDATA[<p>windows的cmd命令用起来不顺手，Linux系的bash命令酸爽多了。<br>首先下载<a href="https://git-scm.com/download/win" target="_blank" rel="external">git</a>，一般来说都有这个软件，有的话忽略。<br>然后找到git的安装路径，我电脑git安装在D盘的<br><img src="images/1.png"><br><br>然后进入usr目录，再进入bin目录，把该目录链接添加一个环境变量。保存就可以了<br><img src="images/2.png"><br><br>然后就可以愉快的使用bash命令了，瞬间酸爽许多。<br>ls rm mkdir等等都可以完美使用.<br><strong>最主要的是可以使用vim，让cmd瞬间强大了许多,有木有!!!<br><img src="images/3.png"><br></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows的cmd命令用起来不顺手，Linux系的bash命令酸爽多了。&lt;br&gt;首先下载&lt;a href=&quot;https://git-scm.com/download/win&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git&lt;/a&gt;，一般来说都有这个软
    
    </summary>
    
    
      <category term="技巧" scheme="http://www.djangoz.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>并查集(Union-Find)算法介绍</title>
    <link href="http://www.djangoz.com/2017/09/12/union-find/"/>
    <id>http://www.djangoz.com/2017/09/12/union-find/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2017-10-27T07:33:37.575Z</updated>
    
    <content type="html"><![CDATA[<p>在看完<a href="https://www.coursera.org/learn/algorithms-part1" target="_blank" rel="external">algorithms-part1</a>第一周的Union-Find视频和<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="external">算法(第四版)</a> 一书的Section 1.5后，本来也打算写一些笔记的，但是发现有篇文章写得很好，就转载过来了。<br>先贴上自己学习过程中写的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//import edu.princeton.cs.introcs.StdIn;</span></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] id;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] sz;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">		count = <span class="number">0</span>;</div><div class="line">		id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">		sz = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">			id[i] = i;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">			sz[i] = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span> (i != id[i]) &#123;</div><div class="line">			id[i] = id[id[i]];	<span class="comment">//路径压缩</span></div><div class="line">			i = id[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> i;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> find(p) == find(q);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i = find(p);</div><div class="line">		<span class="keyword">int</span> j = find(q);</div><div class="line">		<span class="keyword">if</span> (i == j)</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		<span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123;	<span class="comment">//对树的高度加权，总是选择讲小树连接到大树</span></div><div class="line">			id[i] = j;</div><div class="line">			sz[j] += sz[i];</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			id[j] = i;</div><div class="line">			sz[i] += sz[j];</div><div class="line">		&#125;</div><div class="line">		count++;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="comment">// int N = StdIn.readInt();</span></div><div class="line">		<span class="keyword">int</span> N = in.nextInt();</div><div class="line">		UnionFind uFind = <span class="keyword">new</span> UnionFind(N);</div><div class="line">		<span class="keyword">while</span> (in.hasNext()) &#123;</div><div class="line">			<span class="comment">// int p = StdIn.readInt();</span></div><div class="line">			<span class="comment">// int q = StdIn.readInt();</span></div><div class="line">			<span class="keyword">int</span> p = in.nextInt();</div><div class="line">			<span class="keyword">int</span> q = in.nextInt();</div><div class="line">			<span class="keyword">if</span> (uFind.connected(p, q))</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			uFind.union(p, q);</div><div class="line">			System.out.println(p + <span class="string">" "</span> + q);</div><div class="line">		&#125;</div><div class="line">		System.out.println(uFind.count + <span class="string">"components"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>本文主要介绍解决动态连通性一类问题的一种算法，使用到了一种叫做并查集的数据结构，称为Union-Find。更多的信息可以参考<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="external">算法(第四版)</a> 一书的Section 1.5，实际上本文也就是基于它的一篇读后感吧。原文中更多的是给出一些结论，我尝试给出一些思路上的过程，即为什么要使用这个方法，而不是别的什么方法。我觉得这个可能更加有意义一些，相比于记下一些结论。</p>
<h2 id="关于动态连通性"><a href="#关于动态连通性" class="headerlink" title="关于动态连通性"></a>关于动态连通性</h2><p>我们看一张图来了解一下什么是动态连通性：<br><img src="./images/1339478916_8193.png" align="middle" width="203" height="450" alt=""><br><br>假设我们输入了一组整数对，即上图中的(4, 3) (3, 8)等等，每对整数代表这两个points/sites是连通的。那么随着数据的不断输入，整个图的连通性也会发生变化，从上图中可以很清晰的发现这一点。同时，对于已经处于连通状态的points/sites，直接忽略，比如上图中的(8, 9)。</p>
<h3 id="动态连通性的应用场景："><a href="#动态连通性的应用场景：" class="headerlink" title="动态连通性的应用场景："></a>动态连通性的应用场景：</h3><ul>
<li>网络连接判断：<br>  如果每个pair中的两个整数分别代表一个网络节点，那么该pair就是用来表示这两个节点是需要连通的。那么为所有的pairs建立了动态连通图后，就能够尽可能少的减少布线的需要，因为已经连通的两个节点会被直接忽略掉。</li>
<li>变量名等同性(类似于指针的概念)：<br>  在程序中，可以声明多个引用来指向同一对象，这个时候就可以通过为程序中声明的引用和实际对象建立动态连通图来判断哪些引用实际上是指向同一对象。</li>
</ul>
<h2 id="对问题建模："><a href="#对问题建模：" class="headerlink" title="对问题建模："></a>对问题建模：</h2><p>在对问题进行建模的时候，我们应该尽量想清楚需要解决的问题是什么。因为模型中选择的数据结构和算法显然会根据问题的不同而不同，就动态连通性这个场景而言，我们需要解决的问题可能是：</p>
<ul>
<li>给出两个节点，判断它们是否连通，如果连通，不需要给出具体的路径</li>
<li>给出两个节点，判断它们是否连通，如果连通，需要给出具体的路径</li>
</ul>
<p>就上面两种问题而言，虽然只有是否能够给出具体路径的区别，但是这个区别导致了选择算法的不同，本文主要介绍的是第一种情况，即不需要给出具体路径的Union-Find算法，而第二种情况可以使用基于DFS的算法。</p>
<h3 id="建模思路："><a href="#建模思路：" class="headerlink" title="建模思路："></a>建模思路：</h3><p>最简单而直观的假设是，对于连通的所有节点，我们可以认为它们属于一个组，因此不连通的节点必然就属于不同的组。随着Pair的输入，我们需要首先判断输入的两个节点是否连通。如何判断呢？按照上面的假设，我们可以通过判断它们属于的组，然后看看这两个组是否相同，如果相同，那么这两个节点连通，反之不连通。为简单起见，我们将所有的节点以整数表示，即对N个节点使用0到N-1的整数表示。而在处理输入的Pair之前，每个节点必然都是孤立的，即他们分属于不同的组，可以使用数组来表示这一层关系，数组的index是节点的整数表示，而相应的值就是该节点的组号了。该数组可以初始化为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)  </div><div class="line">    id[i] = i;</div></pre></td></tr></table></figure>
<p>即对于节点i，它的组号也是i。</p>
<p>初始化完毕之后，对该动态连通图有几种可能的操作：</p>
<ul>
<li>查询节点属于的组<br>  数组对应位置的值即为组号</li>
<li>判断两个节点是否属于同一个组<br>  分别得到两个节点的组号，然后判断组号是否相等</li>
<li>连接两个节点，使之属于同一个组<br>  分别得到两个节点的组号，组号相同时操作结束，不同时，将其中的一个节点的组号换成另一个节点的组号</li>
<li>获取组的数目<br>  初始化为节点的数目，然后每次成功连接两个节点之后，递减1</li>
</ul>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>我们可以设计相应的API：<br><img src="./images/1339479136_7058.png" width="610" height="200" alt=""><br><br>注意其中使用整数来表示节点，如果需要使用其他的数据类型表示节点，比如使用字符串，那么可以用哈希表来进行映射，即将String映射成这里需要的Integer类型。</p>
<p>分析以上的API，方法connected和union都依赖于find，connected对两个参数调用两次find方法，而union在真正执行union之前也需要判断是否连通，这又是两次调用find方法。因此我们需要把find方法的实现设计的尽可能的高效。所以就有了下面的Quick-Find实现。</p>
<h2 id="Quick-Find-算法："><a href="#Quick-Find-算法：" class="headerlink" title="Quick-Find 算法："></a>Quick-Find 算法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span>  </span></div><div class="line"><span class="class"></span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id; <span class="comment">// access to component id (site indexed)  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// number of components  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span>  </span></div><div class="line"><span class="function">    </span>&#123;  </div><div class="line">        <span class="comment">// Initialize component id array.  </span></div><div class="line">        count = N;  </div><div class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[N];  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)  </div><div class="line">            id[i] = i;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span>  </span></div><div class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> count; &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>  </span></div><div class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> find(p) == find(q); &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span>  </span></div><div class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> id[p]; &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>  </span></div><div class="line"><span class="function">    </span>&#123;   </div><div class="line">        <span class="comment">// 获得p和q的组号  </span></div><div class="line">        <span class="keyword">int</span> pID = find(p);  </div><div class="line">        <span class="keyword">int</span> qID = find(q);  </div><div class="line">        <span class="comment">// 如果两个组号相等，直接返回  </span></div><div class="line">        <span class="keyword">if</span> (pID == qID) <span class="keyword">return</span>;  </div><div class="line">        <span class="comment">// 遍历一次，改变组号使他们属于一个组  </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++)  </div><div class="line">            <span class="keyword">if</span> (id[i] == pID) id[i] = qID;  </div><div class="line">        count--;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>举个例子，比如输入的Pair是(5， 9)，那么首先通过find方法发现它们的组号并不相同，然后在union的时候通过一次遍历，将组号1都改成8。当然，由8改成1也是可以的，保证操作时都使用一种规则就行。<br><img src="./images/1339479271_3352.png" width="300" height="270" alt=""><br><br>上述代码的find方法十分高效，因为仅仅需要一次数组读取操作就能够找到该节点的组号，但是问题随之而来，对于需要添加新路径的情况，就涉及到对于组号的修改，因为并不能确定哪些节点的组号需要被修改，因此就必须对整个数组进行遍历，找到需要修改的节点，逐一修改，这一下每次添加新路径带来的复杂度就是线性关系了，如果要添加的新路径的数量是M，节点数量是N，那么最后的时间复杂度就是MN，显然是一个平方阶的复杂度，对于大规模的数据而言，平方阶的算法是存在问题的，这种情况下，每次添加新路径就是“牵一发而动全身”，想要解决这个问题，关键就是要提高union方法的效率，让它不再需要遍历整个数组。</p>
<h2 id="Quick-Union-算法："><a href="#Quick-Union-算法：" class="headerlink" title="Quick-Union 算法："></a>Quick-Union 算法：</h2><p>考虑一下，为什么以上的解法会造成“牵一发而动全身”？因为每个节点所属的组号都是单独记录，各自为政的，没有将它们以更好的方式组织起来，当涉及到修改的时候，除了逐一通知、修改，别无他法。所以现在的问题就变成了，如何将节点以更好的方式组织起来，组织的方式有很多种，但是最直观的还是将组号相同的节点组织在一起，想想所学的数据结构，什么样子的数据结构能够将一些节点给组织起来？常见的就是链表，图，树，什么的了。但是哪种结构对于查找和修改的效率最高？毫无疑问是树，因此考虑如何将节点和组的关系以树的形式表现出来。</p>
<p>如果不改变底层数据结构，即不改变使用数组的表示方法的话。可以采用parent-link的方式将节点组织起来，举例而言，id[p]的值就是p节点的父节点的序号，如果p是树根的话，id[p]的值就是p，因此最后经过若干次查找，一个节点总是能够找到它的根节点，即满足id[root] = root的节点也就是组的根节点了，然后就可以使用根节点的序号来表示组号。所以在处理一个pair的时候，将首先找到pair中每一个节点的组号(即它们所在树的根节点的序号)，如果属于不同的组的话，就将其中一个根节点的父节点设置为另外一个根节点，相当于将一颗独立的树编程另一颗独立的树的子树。直观的过程如下图所示。但是这个时候又引入了问题。</p>
<p><img src="./images/1339479431_6633.png" width="609" height="428" alt=""><br></p>
<p>在实现上，和之前的Quick-Find只有find和union两个方法有所不同：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span>  </span></div><div class="line"><span class="function"></span>&#123;   </div><div class="line">    <span class="comment">// 寻找p节点所在组的根节点，根节点具有性质id[root] = root  </span></div><div class="line">    <span class="keyword">while</span> (p != id[p]) p = id[p];  </div><div class="line">    <span class="keyword">return</span> p;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>  </span></div><div class="line"><span class="function"></span>&#123;   </div><div class="line">    <span class="comment">// Give p and q the same root.  </span></div><div class="line">    <span class="keyword">int</span> pRoot = find(p);  </div><div class="line">    <span class="keyword">int</span> qRoot = find(q);  </div><div class="line">    <span class="keyword">if</span> (pRoot == qRoot)   </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    id[pRoot] = qRoot;    <span class="comment">// 将一颗树(即一个组)变成另外一课树(即一个组)的子树  </span></div><div class="line">    count--;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>树这种数据结构容易出现极端情况，因为在建树的过程中，树的最终形态严重依赖于输入数据本身的性质，比如数据是否排序，是否随机分布等等。比如在输入数据是有序的情况下，构造的BST会退化成一个链表。在我们这个问题中，也是会出现的极端情况的，如下图所示。</p>
<p><img src="./images/1339479497_8053.png" width="460" height="530" alt=""><br></p>
<p>为了克服这个问题，BST可以演变成为红黑树或者AVL树等等。</p>
<p>然而，在我们考虑的这个应用场景中，每对节点之间是不具备可比性的。因此需要想其它的办法。在没有什么思路的时候，多看看相应的代码可能会有一些启发，考虑一下Quick-Union算法中的union方法实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>  </span></div><div class="line"><span class="function"></span>&#123;   </div><div class="line">    <span class="comment">// Give p and q the same root.  </span></div><div class="line">    <span class="keyword">int</span> pRoot = find(p);  </div><div class="line">    <span class="keyword">int</span> qRoot = find(q);  </div><div class="line">    <span class="keyword">if</span> (pRoot == qRoot)   </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    id[pRoot] = qRoot;  <span class="comment">// 将一颗树(即一个组)变成另外一课树(即一个组)的子树  </span></div><div class="line">    count--;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面 id[pRoot] = qRoot 这行代码看上去似乎不太对劲。因为这也属于一种“硬编码”，这样实现是基于一个约定，即p所在的树总是会被作为q所在树的子树，从而实现两颗独立的树的融合。那么这样的约定是不是总是合理的呢？显然不是，比如p所在的树的规模比q所在的树的规模大的多时，p和q结合之后形成的树就是十分不和谐的一头轻一头重的”畸形树“了。<br>所以我们应该考虑树的大小，然后再来决定到底是调用：<br>id[pRoot] = qRoot 或者是 id[qRoot] = pRoot<br><img src="./images/1339479587_5986.png" width="540" height="452" alt=""><br><br>即总是size小的树作为子树和size大的树进行合并。这样就能够尽量的保持整棵树的平衡。</p>
<p>所以现在的问题就变成了：树的大小该如何确定？<br>我们回到最初的情形，即每个节点最一开始都是属于一个独立的组，通过下面的代码进行初始化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)  </div><div class="line">    id[i] = i;    <span class="comment">// 每个节点的组号就是该节点的序号</span></div></pre></td></tr></table></figure></p>
<p>以此类推，在初始情况下，每个组的大小都是1，因为只含有一个节点，所以我们可以使用额外的一个数组来维护每个组的大小，对该数组的初始化也很直观：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">int</span> i = find(p);  </div><div class="line">    <span class="keyword">int</span> j = find(q);  </div><div class="line">    <span class="keyword">if</span> (i == j) <span class="keyword">return</span>;  </div><div class="line">    <span class="comment">// 将小树作为大树的子树  </span></div><div class="line">    <span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123; id[i] = j; sz[j] += sz[i]; &#125;  </div><div class="line">    <span class="keyword">else</span> &#123; id[j] = i; sz[i] += sz[j]; &#125;  </div><div class="line">    count--;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Quick-Union 和 Weighted Quick-Union 的比较：<br><img src="./images/1339479677_7171.png" width="754" height="410" alt=""><br><br>可以发现，通过sz数组决定如何对两棵树进行合并之后，最后得到的树的高度大幅度减小了。这是十分有意义的，因为在Quick-Union算法中的任何操作，都不可避免的需要调用find方法，而该方法的执行效率依赖于树的高度。树的高度减小了，find方法的效率就增加了，从而也就增加了整个Quick-Union算法的效率。</p>
<p>上图其实还可以给我们一些启示，即对于Quick-Union算法而言，节点组织的理想情况应该是一颗十分扁平的树，所有的孩子节点应该都在height为1的地方，即所有的孩子都直接连接到根节点。这样的组织结构能够保证find操作的最高效率。</p>
<p>那么如何构造这种理想结构呢？<br>在find方法的执行过程中，不是需要进行一个while循环找到根节点嘛？如果保存所有路过的中间节点到一个数组中，然后在while循环结束之后，将这些中间节点的父节点指向根节点，不就行了么？但是这个方法也有问题，因为find操作的频繁性，会造成频繁生成中间节点数组，相应的分配销毁的时间自然就上升了。那么有没有更好的方法呢？还是有的，即将节点的父节点指向该节点的爷爷节点，这一点很巧妙，十分方便且有效，相当于在寻找根节点的同时，对路径进行了压缩，使整个树结构扁平化。相应的实现如下，实际上只需要添加一行代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">while</span> (p != id[p])  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">// 将p节点的父节点设置为它的爷爷节点  </span></div><div class="line">        id[p] = id[id[p]];  </div><div class="line">        p = id[p];  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> p;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，动态连通性相关的Union-Find算法基本上就介绍完了，从容易想到的Quick-Find到相对复杂但是更加高效的Quick-Union，然后到对Quick-Union的几项改进，让我们的算法的效率不断的提高。<br>这几种算法的时间复杂度如下所示：<br><img src="./images/20170912215243.png" alt=""><br><br>对大规模数据进行处理，使用平方阶的算法是不合适的，比如简单直观的Quick-Find算法，通过发现问题的更多特点，找到合适的数据结构，然后有针对性的进行改进，得到了Quick-Union算法及其多种改进算法，最终使得算法的复杂度降低到了近乎线性复杂度。</p>
<p>如果需要的功能不仅仅是检测两个节点是否连通，还需要在连通时得到具体的路径，那么就需要用到别的算法了，比如DFS或者BFS。</p>
<p>该文章转载于<a href="http://blog.csdn.net/dm_vincent/article/details/7655764" target="_blank" rel="external">dm_vincent的专栏</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在看完&lt;a href=&quot;https://www.coursera.org/learn/algorithms-part1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;algorithms-part1&lt;/a&gt;第一周的Union-Find视频和&lt;a href=
    
    </summary>
    
      <category term="java" scheme="http://www.djangoz.com/categories/java/"/>
    
    
      <category term="算法与数据结构" scheme="http://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java实现简易的stack</title>
    <link href="http://www.djangoz.com/2017/09/09/stack-in-java/"/>
    <id>http://www.djangoz.com/2017/09/09/stack-in-java/</id>
    <published>2017-09-08T16:00:00.000Z</published>
    <updated>2017-10-27T07:33:26.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用java实现stack模板"><a href="#用java实现stack模板" class="headerlink" title="用java实现stack模板"></a>用java实现stack模板</h2><p>栈是一种基于后进先出（LIFO)策略的线性数据结构。<br>这就像手枪弹夹一样，先填进去的子弹都打出，后填进去的子弹后打出。<br>该模板只有5个方法，分别是isEmpty(),size(),top(),pop(),push(T).<br>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stack</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> Node first;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> N;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</div><div class="line">		Item item;</div><div class="line">		Node next;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;						<span class="comment">//判断是否为空</span></div><div class="line">		<span class="keyword">return</span> first ==<span class="keyword">null</span>;</div><div class="line">		&#125; </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;							 	<span class="comment">//栈的大小</span></div><div class="line">		<span class="keyword">return</span> N;</div><div class="line">		&#125;                   </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span></span>&#123;                    <span class="comment">//添加元素</span></div><div class="line">		Node oldfirst = first;</div><div class="line">		first = <span class="keyword">new</span> Node();</div><div class="line">		first.item = item;</div><div class="line">		first.next = oldfirst;</div><div class="line">		N++;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span>&#123;                              <span class="comment">//弹出元素</span></div><div class="line">		Item item = first.item;</div><div class="line">		first = first.next;</div><div class="line">		N--;</div><div class="line">		<span class="keyword">return</span> item;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">top</span><span class="params">()</span></span>&#123;		<span class="comment">//访问栈顶元素</span></div><div class="line">		<span class="keyword">return</span> first.item;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		stack&lt;Integer&gt; te = <span class="keyword">new</span> stack&lt;Integer&gt;();</div><div class="line">		te.push(<span class="number">19</span>);</div><div class="line">		<span class="keyword">if</span>(te.isEmpty())&#123;</div><div class="line">			System.out.println(<span class="string">"isEmpty!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span></div><div class="line">			System.out.println(<span class="string">"Not Empty!"</span>);</div><div class="line">		te.push(<span class="number">20</span>);</div><div class="line">		System.out.println(te.pop());</div><div class="line">		System.out.println(te.top());</div><div class="line">		System.out.println(te.pop());</div><div class="line">		<span class="keyword">if</span>(te.isEmpty())&#123;</div><div class="line">			System.out.println(<span class="string">"isEmpty!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span></div><div class="line">			System.out.println(<span class="string">"Not Empty!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该程序输入为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Not Empty!</div><div class="line">20</div><div class="line">19</div><div class="line">19</div><div class="line">isEmpty!</div></pre></td></tr></table></figure></p>
<p>部分实现参考于<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="external">算法(第四版)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用java实现stack模板&quot;&gt;&lt;a href=&quot;#用java实现stack模板&quot; class=&quot;headerlink&quot; title=&quot;用java实现stack模板&quot;&gt;&lt;/a&gt;用java实现stack模板&lt;/h2&gt;&lt;p&gt;栈是一种基于后进先出（LIFO)策略的线性数
    
    </summary>
    
      <category term="java" scheme="http://www.djangoz.com/categories/java/"/>
    
    
      <category term="算法与数据结构" scheme="http://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java实现简易的queue</title>
    <link href="http://www.djangoz.com/2017/09/09/queue-in-java/"/>
    <id>http://www.djangoz.com/2017/09/09/queue-in-java/</id>
    <published>2017-09-08T16:00:00.000Z</published>
    <updated>2017-10-27T07:33:07.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用java实现queue模板"><a href="#用java实现queue模板" class="headerlink" title="用java实现queue模板"></a>用java实现queue模板</h2><p>队列是一种基于先进先出（FIFO)策略的线性数据结构。<br>这就像在学校食堂买饭排队一样，排在前面的人先打饭，后面的人后打饭。<br>该模板只有6个方法，分别是isEmpty(),size(),front(),back(),pop(),push(T).<br>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">queue</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> Node first;</div><div class="line">	<span class="keyword">private</span> Node last;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> N;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">		Item item;</div><div class="line">		Node next;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;			<span class="comment">//判断是否为空</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.first==<span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;				<span class="comment">//队列的大小</span></div><div class="line">		<span class="keyword">return</span> N;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item T)</span></span>&#123;			<span class="comment">//向队列添加元素</span></div><div class="line">		Node temp = last;</div><div class="line">		last = <span class="keyword">new</span> Node();</div><div class="line">		last.item = T;</div><div class="line">		last.next = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(isEmpty())</div><div class="line">			first = last;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			temp.next = last;</div><div class="line">		N++;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span>&#123;		<span class="comment">//弹出第一个元素，并返回第一个元素</span></div><div class="line">		Node temp = first;</div><div class="line">		first = first.next;</div><div class="line">		<span class="keyword">if</span>(isEmpty()) </div><div class="line">			last=<span class="keyword">null</span>;</div><div class="line">		N--;</div><div class="line">		<span class="keyword">return</span> temp.item;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">front</span><span class="params">()</span></span>&#123;		<span class="comment">//访问队列第一个元素</span></div><div class="line">		<span class="keyword">return</span> first.item;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Item <span class="title">back</span><span class="params">()</span></span>&#123;&#125;		<span class="comment">//访问队列最后一个元素</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		queue&lt;String&gt; sb = <span class="keyword">new</span> queue&lt;String&gt;();</div><div class="line">		sb.push(<span class="string">"hi"</span>);</div><div class="line">		<span class="keyword">if</span>(sb.isEmpty())</div><div class="line">			System.out.println(<span class="string">"isEmpty!"</span>);</div><div class="line">		<span class="keyword">else</span> System.out.println(<span class="string">"NotEmpty!"</span>);</div><div class="line">		sb.push(<span class="string">"hello"</span>);</div><div class="line">		sb.push(<span class="string">"world"</span>);</div><div class="line">		System.out.println(sb.front());</div><div class="line">		System.out.println(sb.pop());</div><div class="line">		System.out.println(sb.back());</div><div class="line">		System.out.println(sb.pop());</div><div class="line">		System.out.println(sb.pop());</div><div class="line">		<span class="keyword">if</span>(sb.isEmpty())</div><div class="line">			System.out.println(<span class="string">"isEmpty!"</span>);</div><div class="line">		<span class="keyword">else</span> System.out.println(<span class="string">"NotEmpty!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该程序输入为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NotEmpty!</div><div class="line">hi</div><div class="line">hi</div><div class="line">world</div><div class="line">hello</div><div class="line">world</div><div class="line">NotEmpty!</div></pre></td></tr></table></figure></p>
<p>部分实现参考于<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="external">算法(第四版)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用java实现queue模板&quot;&gt;&lt;a href=&quot;#用java实现queue模板&quot; class=&quot;headerlink&quot; title=&quot;用java实现queue模板&quot;&gt;&lt;/a&gt;用java实现queue模板&lt;/h2&gt;&lt;p&gt;队列是一种基于先进先出（FIFO)策略的线性
    
    </summary>
    
      <category term="java" scheme="http://www.djangoz.com/categories/java/"/>
    
    
      <category term="算法与数据结构" scheme="http://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>windows下访问linux分区文件</title>
    <link href="http://www.djangoz.com/2017/08/18/windows-to-linux/"/>
    <id>http://www.djangoz.com/2017/08/18/windows-to-linux/</id>
    <published>2017-08-18T03:27:50.000Z</published>
    <updated>2017-08-24T14:33:36.468Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://sourceforge.net/projects/ext2fsd/files/" target="_blank" rel="external">Ext2Fsd Project</a>是Windows下的应用程序，可以在windows下访问ext2/ext3/ext4文件系统，可以设置编码，分配盘符，更可以在windows下读写，使用性能好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://sourceforge.net/projects/ext2fsd/files/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ext2Fsd Project&lt;/a&gt;是Windows下的应用程序，可以在windows下访问ex
    
    </summary>
    
    
      <category term="linux" scheme="http://www.djangoz.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>更换主题</title>
    <link href="http://www.djangoz.com/2017/08/17/change-theme/"/>
    <id>http://www.djangoz.com/2017/08/17/change-theme/</id>
    <published>2017-08-17T10:10:16.000Z</published>
    <updated>2017-08-24T14:33:30.159Z</updated>
    
    <content type="html"><![CDATA[<p>爱折腾的我又把原来网站换了框架，<br>把jekyll换成了hexo，<br>感觉hexo支持的主题看起来美观多了<br>该主题来自<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">indigo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爱折腾的我又把原来网站换了框架，&lt;br&gt;把jekyll换成了hexo，&lt;br&gt;感觉hexo支持的主题看起来美观多了&lt;br&gt;该主题来自&lt;a href=&quot;https://github.com/yscoder/hexo-theme-indigo&quot; target=&quot;_blank&quot; 
    
    </summary>
    
    
      <category term="闲言碎语" scheme="http://www.djangoz.com/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>在linux环境安装shadowsocksR客户端</title>
    <link href="http://www.djangoz.com/2017/08/16/linux_setup_ssr/"/>
    <id>http://www.djangoz.com/2017/08/16/linux_setup_ssr/</id>
    <published>2017-08-15T16:00:00.000Z</published>
    <updated>2017-08-24T14:33:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>ssr 相比于ss 更加稳定，推荐安装ssr<br>之前在网上找很久没找到如何在Linux环境下运行ssr，后来通过这个脚本安装ssr，亲测可用<br>安装以后可通过　ssr start或者　ssr config　命令运行ssr<br>使用root用户登录，运行以下命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://www.djangoz.com/linux_setup_ssr/ssr</div><div class="line">sudo mv ssr /usr/<span class="built_in">local</span>/bin</div><div class="line">sudo chmod 766 /usr/<span class="built_in">local</span>/bin/ssr</div><div class="line">ssr install</div><div class="line">ssr config</div></pre></td></tr></table></figure></p>
<h4 id="ssr的配置就不说明了，很简单的"><a href="#ssr的配置就不说明了，很简单的" class="headerlink" title="ssr的配置就不说明了，很简单的"></a>ssr的配置就不说明了，很简单的</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ssr 相比于ss 更加稳定，推荐安装ssr&lt;br&gt;之前在网上找很久没找到如何在Linux环境下运行ssr，后来通过这个脚本安装ssr，亲测可用&lt;br&gt;安装以后可通过　ssr start或者　ssr config　命令运行ssr&lt;br&gt;使用root用户登录，运行以下命令：&lt;
    
    </summary>
    
    
      <category term="科学上网" scheme="http://www.djangoz.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>求二叉树的最大深度和最小深度</title>
    <link href="http://www.djangoz.com/2017/08/15/Depth-of-Binary-tree/"/>
    <id>http://www.djangoz.com/2017/08/15/Depth-of-Binary-tree/</id>
    <published>2017-08-14T16:00:00.000Z</published>
    <updated>2017-10-27T07:32:10.608Z</updated>
    
    <content type="html"><![CDATA[<p>运用递归的思想实现起来简单很多。</p>
<h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    TreeNode *left,*right;</div><div class="line">    TreeNode()&#123;&#125;</div><div class="line">    TreeNode(<span class="keyword">int</span> _val):val(_val),left(<span class="literal">NULL</span>),right(<span class="literal">NULL</span>)&#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>具体实现二叉树就不写了。</p>
<h3 id="求二叉树的最大深度"><a href="#求二叉树的最大深度" class="headerlink" title="求二叉树的最大深度"></a>求二叉树的最大深度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(!root-&gt;left) <span class="keyword">return</span> <span class="number">1</span>+maxDepth(root-&gt;right);</div><div class="line">    <span class="keyword">if</span>(!root-&gt;right) <span class="keyword">return</span> <span class="number">1</span>+maxDepth(root-&gt;left);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>+max(maxDepth(root-&gt;left),maxDepth(root-&gt;right));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="求二叉树的最小深度"><a href="#求二叉树的最小深度" class="headerlink" title="求二叉树的最小深度"></a>求二叉树的最小深度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(!root-&gt;left) <span class="keyword">return</span> <span class="number">1</span>+minDepth(root-&gt;right);</div><div class="line">    <span class="keyword">if</span>(!root-&gt;right) <span class="keyword">return</span> <span class="number">1</span>+minDepth(root-&gt;left);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>+min(minDepth(root-&gt;left),minDepth(root-&gt;right));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运用递归的思想实现起来简单很多。&lt;/p&gt;
&lt;h3 id=&quot;二叉树的定义&quot;&gt;&lt;a href=&quot;#二叉树的定义&quot; class=&quot;headerlink&quot; title=&quot;二叉树的定义&quot;&gt;&lt;/a&gt;二叉树的定义&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;ta
    
    </summary>
    
      <category term="c++" scheme="http://www.djangoz.com/categories/c/"/>
    
    
      <category term="算法与数据结构" scheme="http://www.djangoz.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>先随便写写</title>
    <link href="http://www.djangoz.com/2017/08/12/wirte-something/"/>
    <id>http://www.djangoz.com/2017/08/12/wirte-something/</id>
    <published>2017-08-11T16:00:00.000Z</published>
    <updated>2017-08-24T14:32:49.833Z</updated>
    
    <content type="html"><![CDATA[<p>　　今天终于学会在静态网站上安装插件了(其实也不算，是直接用的别人的主题)，原来也不难，昨天弄了老半天都没弄出来<br>　　还是写一写方法吧<br>　　(⊙o⊙)…还是以后在写吧，现在还不会用markdown写文档<br>　　初学者什么都不会~~o(&gt;_&lt;)o ~~<br>　　还是直接贴我参考的地方吧<a href="http://ixti.net/software/2013/01/28/using-jekyll-plugins-on-github-pages.html" target="_blank" rel="external">在GitHub页面上使用Jekyll插件</a><br>  　　把主题<a href="https://github.com/mmistakes/made-mistakes-jekyll" target="_blank" rel="external">作者的github项目主页</a>贴一下，表示感谢</p>
]]></content>
    
    <summary type="html">
    
      A ton of text to test readability.
    
    </summary>
    
    
      <category term="闲言碎语" scheme="http://www.djangoz.com/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>创建博客成功</title>
    <link href="http://www.djangoz.com/2017/08/11/first-time/"/>
    <id>http://www.djangoz.com/2017/08/11/first-time/</id>
    <published>2017-08-10T16:00:00.000Z</published>
    <updated>2017-08-24T14:32:15.892Z</updated>
    
    <content type="html"><![CDATA[<p>创建时间2017-08-11 23:17:37<br>弄了一天终于弄成个样子了，准备装插件，但是一直没有成功<br>更新时间2017-08-12 00:04:57</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建时间2017-08-11 23:17:37&lt;br&gt;弄了一天终于弄成个样子了，准备装插件，但是一直没有成功&lt;br&gt;更新时间2017-08-12 00:04:57&lt;/p&gt;

    
    </summary>
    
    
      <category term="闲言碎语" scheme="http://www.djangoz.com/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
</feed>
