[{"title":"java实现简易的stack","date":"2017-09-08T16:00:00.000Z","path":"2017/09/09/stack-in-java/","text":"用java实现stack模板栈是一种基于后进先出（LIFO)策略的线性数据结构。这就像手枪弹夹一样，先填进去的子弹都打出，后填进去的子弹后打出。该模板只有5个方法，分别是isEmpty(),size(),top(),pop(),push(T).代码如下:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class stack&lt;Item&gt; &#123; private Node first; private int N; private class Node&#123; Item item; Node next; &#125; public boolean isEmpty()&#123; //判断是否为空 return first ==null; &#125; public int size()&#123; //栈的大小 return N; &#125; public void push(Item item)&#123; //添加元素 Node oldfirst = first; first = new Node(); first.item = item; first.next = oldfirst; N++; &#125; public Item pop()&#123; //弹出元素 Item item = first.item; first = first.next; N--; return item; &#125; public Item top()&#123; //访问栈顶元素 return first.item; &#125; public static void main(String[] args) &#123; stack&lt;Integer&gt; te = new stack&lt;Integer&gt;(); te.push(19); if(te.isEmpty())&#123; System.out.println(\"isEmpty!\"); &#125;else System.out.println(\"Not Empty!\"); te.push(20); System.out.println(te.pop()); System.out.println(te.top()); System.out.println(te.pop()); if(te.isEmpty())&#123; System.out.println(\"isEmpty!\"); &#125;else System.out.println(\"Not Empty!\"); &#125;&#125; 该程序输入为：12345Not Empty!201919isEmpty! 部分实现参考于算法(第四版)","tags":[{"name":"算法与数据结构","slug":"算法与数据结构","permalink":"http://www.djangoz.com/tags/算法与数据结构/"}]},{"title":"java实现简易的queue","date":"2017-09-08T16:00:00.000Z","path":"2017/09/09/queue-in-java/","text":"用java实现queue模板队列是一种基于先进先出（FIFO)策略的线性数据结构。这就像在学校食堂买饭排队一样，排在前面的人先打饭，后面的人后打饭。该模板只有6个方法，分别是isEmpty(),size(),front(),back(),pop(),push(T).代码如下:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class queue&lt;Item&gt; &#123; private Node first; private Node last; private int N; private class Node &#123; Item item; Node next; &#125; public boolean isEmpty()&#123; //判断是否为空 return this.first==null; &#125; public int size()&#123; //队列的大小 return N; &#125; public void push(Item T)&#123; //向队列添加元素 Node temp = last; last = new Node(); last.item = T; last.next = null; if(isEmpty()) first = last; else temp.next = last; N++; &#125; public Item pop()&#123; //弹出第一个元素，并返回第一个元素 Node temp = first; first = first.next; if(isEmpty()) last=null; N--; return temp.item; &#125; public Item front()&#123; //访问队列第一个元素 return first.item; &#125; public Item back()&#123;&#125; //访问队列最后一个元素 public static void main(String[] args) &#123; queue&lt;String&gt; sb = new queue&lt;String&gt;(); sb.push(\"hi\"); if(sb.isEmpty()) System.out.println(\"isEmpty!\"); else System.out.println(\"NotEmpty!\"); sb.push(\"hello\"); sb.push(\"world\"); System.out.println(sb.front()); System.out.println(sb.pop()); System.out.println(sb.back()); System.out.println(sb.pop()); System.out.println(sb.pop()); if(sb.isEmpty()) System.out.println(\"isEmpty!\"); else System.out.println(\"NotEmpty!\"); &#125;&#125; 该程序输入为1234567NotEmpty!hihiworldhelloworldNotEmpty! 部分实现参考于算法(第四版)","tags":[{"name":"算法与数据结构","slug":"算法与数据结构","permalink":"http://www.djangoz.com/tags/算法与数据结构/"}]},{"title":"windows下访问linux分区文件","date":"2017-08-18T03:27:50.000Z","path":"2017/08/18/windows-to-linux/","text":"Ext2Fsd Project是Windows下的应用程序，可以在windows下访问ext2/ext3/ext4文件系统，可以设置编码，分配盘符，更可以在windows下读写，使用性能好。","tags":[{"name":"linux","slug":"linux","permalink":"http://www.djangoz.com/tags/linux/"}]},{"title":"更换主题","date":"2017-08-17T10:10:16.000Z","path":"2017/08/17/change-theme/","text":"爱折腾的我又把原来网站换了框架，把jekyll换成了hexo，感觉hexo支持的主题看起来美观多了该主题来自indigo","tags":[{"name":"闲言碎语","slug":"闲言碎语","permalink":"http://www.djangoz.com/tags/闲言碎语/"}]},{"title":"在linux环境安装shadowsocksR客户端","date":"2017-08-15T16:00:00.000Z","path":"2017/08/16/linux_setup_ssr/","text":"ssr 相比于ss 更加稳定，推荐安装ssr之前在网上找很久没找到如何在Linux环境下运行ssr，后来通过这个脚本安装ssr，亲测可用安装以后可通过 ssr start或者 ssr config 命令运行ssr使用root用户登录，运行以下命令：12345wget http://www.djangoz.com/linux_setup_ssr/ssrsudo mv ssr /usr/local/binsudo chmod 766 /usr/local/bin/ssrssr installssr config ssr的配置就不说明了，很简单的","tags":[{"name":"科学上网","slug":"科学上网","permalink":"http://www.djangoz.com/tags/科学上网/"}]},{"title":"求二叉树的最大深度和最小深度","date":"2017-08-14T16:00:00.000Z","path":"2017/08/15/Depth-of-Binary-tree/","text":"运用递归的思想实现起来简单很多。 二叉树的定义123456struct TreeNode&#123; int val; TreeNode *left,*right; TreeNode()&#123;&#125; TreeNode(int _val):val(_val),left(NULL),right(NULL)&#123;&#125;&#125;; 具体实现二叉树就不写了。 求二叉树的最大深度123456int maxDepth(TreeNode* root) &#123; if(!root)return 0; if(!root-&gt;left) return 1+maxDepth(root-&gt;right); if(!root-&gt;right) return 1+maxDepth(root-&gt;left); return 1+max(maxDepth(root-&gt;left),maxDepth(root-&gt;right));&#125; 求二叉树的最小深度123456int minDepth(TreeNode* root) &#123; if(!root)return 0; if(!root-&gt;left) return 1+minDepth(root-&gt;right); if(!root-&gt;right) return 1+minDepth(root-&gt;left); return 1+min(minDepth(root-&gt;left),minDepth(root-&gt;right));&#125;","tags":[{"name":"算法与数据结构","slug":"算法与数据结构","permalink":"http://www.djangoz.com/tags/算法与数据结构/"}]},{"title":"先随便写写","date":"2017-08-11T16:00:00.000Z","path":"2017/08/12/wirte-something/","text":"今天终于学会在静态网站上安装插件了(其实也不算，是直接用的别人的主题)，原来也不难，昨天弄了老半天都没弄出来 还是写一写方法吧 (⊙o⊙)…还是以后在写吧，现在还不会用markdown写文档 初学者什么都不会~~o(&gt;_&lt;)o ~~ 还是直接贴我参考的地方吧在GitHub页面上使用Jekyll插件 把主题作者的github项目主页贴一下，表示感谢","tags":[{"name":"闲言碎语","slug":"闲言碎语","permalink":"http://www.djangoz.com/tags/闲言碎语/"}]},{"title":"创建博客成功","date":"2017-08-10T16:00:00.000Z","path":"2017/08/11/first-time/","text":"创建时间2017-08-11 23:17:37弄了一天终于弄成个样子了，准备装插件，但是一直没有成功更新时间2017-08-12 00:04:57","tags":[{"name":"闲言碎语","slug":"闲言碎语","permalink":"http://www.djangoz.com/tags/闲言碎语/"}]}]